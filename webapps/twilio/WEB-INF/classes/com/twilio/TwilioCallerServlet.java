package com.twilio;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import org.apache.http.message.BasicNameValuePair;
import org.apache.http.NameValuePair;

import com.twilio.sdk.TwilioRestClient;
import com.twilio.sdk.resource.factory.CallFactory;
import com.twilio.sdk.resource.instance.Call;
 
import java.util.ArrayList;
import java.util.List;
 
import com.twilio.sdk.verbs.TwiMLResponse;
import com.twilio.sdk.TwilioRestException;
import com.twilio.sdk.verbs.TwiMLException;
import com.twilio.sdk.verbs.Dial;
import com.twilio.sdk.verbs.Conference;
import com.twilio.sdk.verbs.Gather;

public class TwilioCallerServlet extends HttpServlet {
    
    final String ACCOUNT_SID = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; // Found on your Twilio Dashboard
    final String AUTH_TOKEN = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"; // Found on your Twilio Dashboard
    final String CALL_ENDPOINT = "http://XXXXXXXX.ngrok.io/twilio/handle-caller"; // Paste URL generated by ngrok.
    final String ARTEMIS_NUMBER = "+15555555555"; // The first agent's number.
    final String BARNABAS_NUMBER = "+15555555555"; // The second agent's number.
    final String SUPPORT_NUMBER = "+15555555555"; // Twilio number.

    public void service(HttpServletRequest request, HttpServletResponse response) throws IOException {

        TwiMLResponse twiml = new TwiMLResponse();
        // Dial verb allows callers to enter conference.
        Dial dial = new Dial();
        dial.setHangupOnStar(true);
        // Conference will be named SupportRoom.
        Conference conf = new Conference("SupportRoom");
        conf.setBeep(Conference.BEEP_TRUE);

        try {
            dial.append(conf);  
            twiml.append(dial);
        } catch (TwiMLException e) {
            e.printStackTrace();
        }
        // Check if any key presses were made.
        String digits = request.getParameter("Digits");
        // If digits were pressed, Artemis needs to conference Barnabas.
        if (digits != null && digits.equals("1")) {
            // Call Barnabas to bring into conference.
            makeCall(CALL_ENDPOINT, BARNABAS_NUMBER, SUPPORT_NUMBER);
        }
        else {
            // Check if incoming call is coming directly to our Support Number.
            if(request.getParameter("To").equals(SUPPORT_NUMBER)) {
                // Call Artemis to connect to incoming caller.
                makeCall(CALL_ENDPOINT, ARTEMIS_NUMBER, request.getParameter("From"));
            }
            // Check if the incoming call is coming to Artemis.
            else if(request.getParameter("To").equals(ARTEMIS_NUMBER)) {
                // Append Gather to Artemis's TwiML
                Gather gather = new Gather();
                gather.setAction(CALL_ENDPOINT);
                gather.setNumDigits(1);
                try {
                    twiml.append(gather);
                } catch (TwiMLException e) {
                    e.printStackTrace();
                }
            }
            // Calls coming to Barnabas will receive the same TwiML as the initial caller.
        }
        // Respond with TwiML
        response.setContentType("application/xml");
        response.getWriter().print(twiml.toXML());    
    }

    public void makeCall(String url, String to, String from) {
        try {
            TwilioRestClient client = new TwilioRestClient(ACCOUNT_SID, AUTH_TOKEN);

            List<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair("Url", url));
            params.add(new BasicNameValuePair("To", to));
            params.add(new BasicNameValuePair("From", from));
             
            CallFactory callFactory = client.getAccount().getCallFactory();
            Call call = callFactory.create(params);
        } 
        catch (TwilioRestException e) {
                System.out.println(e.getErrorMessage());
        }
    }
}